'use strict';

const {
  promises: dns
} = require('dns');

const React = require('react');

const {
  useState,
  useEffect
} = require('react');

const {
  Box,
  Text,
  Newline,
  useApp,
  useStdout
} = require('ink');

const Spinner = require('ink-spinner').default;

const api = require('./api.js');

const {
  convertToMpbs
} = require('./utilities.js');

const FixedSpacer = ({
  size
}) => /*#__PURE__*/React.createElement(React.Fragment, null, ' '.repeat(size));

const ErrorMessage = ({
  text
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, {
  bold: true,
  color: "red"
}, "\u203A", /*#__PURE__*/React.createElement(FixedSpacer, {
  size: 1
})), /*#__PURE__*/React.createElement(Text, {
  dimColor: true
}, text), /*#__PURE__*/React.createElement(Newline, {
  count: 2
}));

const Spacer = ({
  singleLine
}) => {
  if (singleLine) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Newline, {
    count: 1
  }));
};

const DownloadSpeed = ({
  isDone,
  downloadSpeed,
  uploadSpeed,
  downloadUnit
} = {}) => {
  const color = isDone || uploadSpeed ? 'green' : 'cyan';
  return /*#__PURE__*/React.createElement(Text, {
    color: color
  }, downloadSpeed, /*#__PURE__*/React.createElement(FixedSpacer, {
    size: 1
  }), /*#__PURE__*/React.createElement(Text, {
    dimColor: true
  }, downloadUnit), /*#__PURE__*/React.createElement(FixedSpacer, {
    size: 1
  }), "\u2193");
};

const UploadSpeed = ({
  isDone,
  uploadSpeed,
  uploadUnit
} = {}) => {
  const color = isDone ? 'green' : 'cyan';

  if (uploadSpeed) {
    return /*#__PURE__*/React.createElement(Text, {
      color: color
    }, uploadSpeed, /*#__PURE__*/React.createElement(Text, {
      dimColor: true
    }, ` ${uploadUnit} ↑`));
  }

  return /*#__PURE__*/React.createElement(Text, {
    dimColor: true,
    color: color
  }, ' - Mbps ↑');
};

const Speed = ({
  upload,
  data
}) => upload ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DownloadSpeed, data), /*#__PURE__*/React.createElement(Text, {
  dimColor: true
}, ' / '), /*#__PURE__*/React.createElement(UploadSpeed, data)) : /*#__PURE__*/React.createElement(DownloadSpeed, data);

const Fast = ({
  singleLine,
  upload,
  json
}) => {
  const [error, setError] = useState('');
  const [data, setData] = useState({});
  const [isDone, setIsDone] = useState(false);
  const {
    exit
  } = useApp();
  const {
    write
  } = useStdout();
  useEffect(() => {
    (async () => {
      try {
        await dns.lookup('fast.com');
      } catch (error) {
        setError(error.code === 'ENOTFOUND' ? 'Please check your internet connection' : `Something happened ${JSON.stringify(error)}`);
        exit();
        return;
      } // eslint-disable-next-line unicorn/no-array-for-each


      api({
        measureUpload: upload
      }).forEach(result => {
        if (!upload) {
          delete result.uploaded;
          delete result.uploadUnit;
          delete result.uploadSpeed;
        }

        setData(result);
      }).catch(error_ => {
        // eslint-disable-line promise/prefer-await-to-then
        setError(error_.message);
        exit();
      });
    })();
  }, [exit, upload]);
  useEffect(() => {
    if (data.isDone || !upload && data.uploadSpeed) {
      setIsDone(true);
    }
  }, [data.isDone, upload, data.uploadSpeed]);
  useEffect(() => {
    if (isDone) {
      if (json) {
        delete data.isDone;
        data.downloadSpeed = convertToMpbs(data.downloadSpeed, data.downloadUnit);
        delete data.downloadUnit;

        if (upload) {
          data.uploadSpeed = convertToMpbs(data.uploadSpeed, data.uploadUnit);
          delete data.uploadUnit;
        }

        write(JSON.stringify(data, undefined, '\t'));
      }

      exit();
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, [isDone, exit]);

  if (error) {
    return /*#__PURE__*/React.createElement(ErrorMessage, {
      text: error
    });
  }

  if (json) {
    return null;
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Spacer, {
    singleLine: singleLine
  }), /*#__PURE__*/React.createElement(Box, null, !isDone && /*#__PURE__*/React.createElement(React.Fragment, null, !singleLine && /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(FixedSpacer, {
    size: 2
  })), /*#__PURE__*/React.createElement(Text, {
    color: "cyan"
  }, /*#__PURE__*/React.createElement(Spinner, null)), /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(FixedSpacer, {
    size: 1
  }))), isDone && /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(FixedSpacer, {
    size: 4
  })), Object.keys(data).length > 0 && /*#__PURE__*/React.createElement(Speed, {
    upload: upload,
    data: data
  })), /*#__PURE__*/React.createElement(Spacer, {
    singleLine: singleLine
  }));
};

module.exports = Fast;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,